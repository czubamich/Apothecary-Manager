// <auto-generated />
using System;
using ApothecaryManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ApothecaryData.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    [Migration("20210415153438_firstMigration2")]
    partial class firstMigration2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApothecaryManager.Data.Model.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ApothecaryManager.Data.Model.Drug", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActiveSubstance")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CategoryRefId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Dose")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IsPrescribed")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("QuantityInPackage")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Unit")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryRefId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("ApothecaryManager.Data.Model.Inventory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Batch")
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<int>("DugyRefId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("date");

                    b.Property<int>("QtyInStock")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierRefId")
                        .HasColumnType("int");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("DugyRefId");

                    b.HasIndex("SupplierRefId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("ApothecaryManager.Data.Model.Prescription", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("Issuer")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PWZ")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Patient")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("ApothecaryManager.Data.Model.Sale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UserRefId")
                        .HasColumnType("int");

                    b.Property<string>("isRefundable")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("UserRefId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("ApothecaryManager.Data.Model.SalesDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("DrugRefId")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionRefId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Refund")
                        .HasColumnType("float");

                    b.Property<int>("SaleRefId")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("DrugRefId");

                    b.HasIndex("PrescriptionRefId");

                    b.HasIndex("SaleRefId");

                    b.ToTable("SalesDetail");
                });

            modelBuilder.Entity("ApothecaryManager.Data.Model.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ApothecaryManager.Data.Model.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Level")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("License")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ApothecaryManager.Data.Model.Drug", b =>
                {
                    b.HasOne("ApothecaryManager.Data.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ApothecaryManager.Data.Model.Inventory", b =>
                {
                    b.HasOne("ApothecaryManager.Data.Model.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DugyRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApothecaryManager.Data.Model.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierRefId");

                    b.Navigation("Drug");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ApothecaryManager.Data.Model.Sale", b =>
                {
                    b.HasOne("ApothecaryManager.Data.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApothecaryManager.Data.Model.SalesDetail", b =>
                {
                    b.HasOne("ApothecaryManager.Data.Model.Sale", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApothecaryManager.Data.Model.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionRefId");

                    b.HasOne("ApothecaryManager.Data.Model.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Prescription");

                    b.Navigation("Sale");
                });
#pragma warning restore 612, 618
        }
    }
}
